--------
| Task |
--------
[ ] add handling error.
[ ] fix file comments.
[ ] add function comments.
[x] make console.
[ ] add panic function.
[x] fix vmalloc and related function.



--------
| Memo |
--------
clang option for cross compile
lib32-glibc-2.14-4

wc -l ./*.c ./*/*.c ./*.asm ./*/*.asm

sources=$(find . \( -name "*.h" -o -name "*.c" -o -name "*.asm" \) -print0 | xargs -0 perl -07 -pe 's/(\s*\/\*[\s\S]*?\*\/)|(\/\/.*)|(;.*)//g' | grep .)
line_nr=$(echo $sources | wc -l)
bytes=$(echo $sources | wc -c)
echo "$line_nr Line\n$((bytes/1024)) KB"

a=0;foreach f (`find . -name "*.c" -o -name "*.asm" -o -name "*.h"`)
e=$(du -b $f | sed 's/^\([0-9]*\).*/\1/g')
a=$((a+e))
end; echo "$((a/1024))kb"

dd if=/dev/zero of=floppy.img bs=512 count=2880
sudo losetup /dev/loop0 floppy.img
sudo mkfs.fat -F 12 /dev/loop0
sudo mount /dev/loop0 /mnt
sudo mkdir /mnt/boot/
sudo cp ~/git/Axel/src/axel.bin /mnt/boot/
sudo umount /mnt
sudo dd if=loader2 of=/dev/loop0 bs=1 count=11
sudo dd if=loader2 of=/dev/loop0 bs=1 skip=90 seek=90 count=422
sudo losetup -d /dev/loop0

sudo losetup /dev/loop0 floppy.img
sudo dd if=loader2 of=/dev/loop0 bs=1 count=11
sudo dd if=loader2 of=/dev/loop0 bs=1 skip=90 seek=90 count=422
sudo losetup -d /dev/loop0


------------
| Thinking |
------------

メモリ管理
    pmalloc(buddy)  - physical memory allocation
        物理メモリ管理
    vmalloc  - virtual memory allocation
        仮想メモリ管理(マップ先物理メモリが連続である必要はない)
    vcmalloc - virtual contiguous memory allocation
        仮想メモリ管理(マップ先物理メモリが連続である必要がある)
    vfree    - virtual memory free
        vmalloc, vcmallocの双方のメモリ解放.

    ユーザ空間は確保領域を一方向にexpandしていく.
    実装
    物理メモリ管理 - BuddySystem
    仮想メモリ管理 - Two level Segregated Fit allocater.
    バディシステムが(2^n * FRAME_SIZE)単位で物理メモリを管理.
        ex. 4KB, 8KB, 16KB, 32KB...
    これでは断片化が激しい
    また、物理メモリ管理のみでは使えないので、ページングをする際の管理方式として
    tlsfを利用することで、断片化を回避する.
    具体的にはBuddySystemから取得したメモリを、より細かい単位で、管理、割り当て可能にする.
        ex. BuddySystemのみだと、1KBのメモリ要求があった際、4KB分の領域を確保するため、3KB無駄になる
            tlsfで、適切に1KB分のみ返すようにする.

    ユーザ空間の実現にあたって
    ユーザ空間の初期化
        ユーザpdtはカーネル空間も持つので、初期化したいユーザ領域の属するpdtに切り替えて
        カーネルが初期化するとよい
            カーネルpdtは常に(3~4GB)固定.
            ユーザpdtは(0~3GB)固定

            CR3にセットされているpdt
            --------------------------------
            |         User          |Kernel|
            --------------------------------
            0                       3      4 [GB]
            pdt内のエントリは物理メモリ上で連続ではなければならない
            Pagefaultを利用してカーネルpdtとユーザpdtを同期させる
            この設計を採用することでカーネルモードになるとき、現在ユーザのpdtから切り替えなくていいので、
            コンテキストスイッチのコストを減少させることが出来る.

    ユーザ空間管理方法
        プロセス毎にページディレクトリテーブルを持たせる
        各プロセスは独自のページディレクトリテーブルを持つことでメモリ空間が独立する
        カーネルプロセスは唯一のものとする
            ただしカーネルスレッドは複数存在出来る.
            構造体でカーネルプロセスは持たず、スレッドだけ複数ある感じ
            そのスレッド集合をカーネルプロセスとする感じ
        その時のページアウト、ページイン方法について
            ページアウト -> 全ユーザプロセスを走査して、対象を決める
                            ページの前に、対象プロセスを決めて、その中から更にページを決める
            ページイン   -> ページアウト時にプロセスの持つページディレクトリテーブルにその旨を書き込んでおく
                            それを元にスワップ先を判定して、復帰する.

    コンテキストスイッチ
        各プロセスにカーネルスタックを設ける
    カーネル -> ユーザ 切り替え
        スタック、ページディレクトリテーブル 切り替え

    ユーザ -> カーネル 切り替え
        スタック、ページディレクトリテーブル 切り替え
        実際の手順
            どっかのユーザアドレスを実行中
            割り込み発生
            権限が異なるので,TSSから割り込みハンドラ用のスタックのセグメント・セレクタとスタックポインタを取得
            この新しいスタック上に、プロセッサは割り込まれたプロシージャのスタック・セグメント・セレクタとスタックポインタをプッシュする。
            次に、プロセッサは、EFLAGS、CS、EIP の各レジスタの現在の状態を新しいスタック上にセーブする
            例外が発生したためにエラーコードがセーブされる場合は、エラーコードは新しいスタック上の EIP 値の後にプッシュされる。
            カーネル処理開始
            割り込まれなかった場合
                普通にiret
            割り込まれた場合
                カーネル -> カーネル 切り替え
        ユーザプロセスを初めて起動したときだけ
        直接的なユーザ -> カーネル 切り替えが起きる?
         -> 全然そんなことはない
        もしくは、スタックとかを調節して、割り込み(カーネル空間)からiretdしたようにユーザ空間に入る

    プロセスの生成
        大まかな流れとしては
            親プロセスを複写
            実行対象のプログラム読み込み
            コンテキストを変更

    ユーザプロセスカーネルプロセスの切り替えというよりも
    カーネルプロセスがコンテキストの変更でユーザプロセスに化ける感じ?

    FreeBSDのように割り込み処理用のスレッドを用意するか
